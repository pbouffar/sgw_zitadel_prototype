spring.application.name=sgw-zitadel-demo

# Set default logging level to DEBUG for the entire application
logging.level.root=INFO

# Set logging level to TRACE for a specific package
logging.level.com.cisco.sgw_zitadel_demo=DEBUG

# Logging for SSL handshake (optional, but useful for debugging)
#logging.level.org.springframework.boot.web.embedded.netty=DEBUG
#logging.level.reactor.netty.http.client=DEBUG
#logging.level.reactor.netty.tcp=DEBUG
#logging.level.org.springframework.security.web.authentication.preauth=DEBUG
#logging.level.org.springframework.security=DEBUG

# Server Configuration
server.port=8090
server.servlet.context-path=/
server.error.include-stacktrace=never

# Enable SSL
server.ssl.enabled=false

# Server Keystore (for the server's own certificate and private key)
# Path to the server's certificate and private key. This is usually a PKCS12 file.
server.ssl.key-store=classpath:certs/server.p12
# Password for the server's keystore.
server.ssl.key-store-password=changeit
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=springboot

# Client Truststore (for trusting client certificates)
# This truststore should contain the CA certificate that signed your client certificates.
# Path to the truststore containing the Certificate Authority (CA) certificate that signed your client certificates. 
# The server uses this to verify the authenticity of client certificates.
server.ssl.trust-store=classpath:certs/truststore.jks
# Password for the truststore.
server.ssl.trust-store-password=changeit
server.ssl.trust-store-type=JKS

# Require client certificate authentication
# 'need' means the client MUST provide a valid certificate.
# 'want' means the client MAY provide a certificate, but it's not required.
# This is the critical setting that tells the server to request and validate a client certificate during the SSL handshake.
server.ssl.client-auth=need

# OAuth2 Resource Server Configuration
# USED TO LOCALLY VALIDATE ACCESS TOKENS IN JWT FORMAT.
# This is the URL of your OAuth 2.0 Authorization Server.
# Spring Security will use this to discover the JWKS endpoint
# (e.g., from /.well-known/openid-configuration or /.well-known/oauth-authorization-server)
# to fetch public keys for JWT validation.
# REPLACE WITH YOUR ACTUAL AUTHORIZATION SERVER ISSUER URI
# Example: Keycloak, Okta, Zitadel, or Spring Authorization Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080
# USED TO VALIDATE OPAQUE ACCESS TOKENS USING ZITADEL'S INTROSPECTION API.
# Your Resource Server acts as a client to the Authorization Server's introspection endpoint.
# You'll need to register your Resource Server as a confidential client with the Authorization Server
# and provide the client-id and client-secret credentials.
# This is the URL of your OAuth 2.0 Authorization Server's introspection endpoint.
# REPLACE WITH YOUR ACTUAL AUTHORIZATION SERVER INTROSPECTION URI
spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8080/oauth/v2/introspect
# The client ID and secret for your Resource Server to authenticate with the Authorization Server's introspection endpoint.
# You will use these for basic authentication (e.g., in an Authorization: Basic header) when making requests to Zitadel's endpoints.
# REPLACE WITH YOUR RESOURCE SERVER'S CLIENT ID. i.e. the SGW_Northbound_API application Client Id.
spring.security.oauth2.resourceserver.opaquetoken.client-id=330021887407138650
# REPLACE WITH YOUR RESOURCE SERVER'S CLIENT SECRET
spring.security.oauth2.resourceserver.opaquetoken.client-secret=bKmiAWt6ZiBmcvD7eBGd5d1tPj5eYot6dGRho0zvRT7O0EmpXb6PqyXDaVfQIZ8N

# OAuth2 Client Configuration
spring.security.oauth2.client.registration.so-mock-client.provider=zitadel-server
# Define a unique registration ID for this client
# Link to the provider definition below
spring.security.oauth2.client.registration.so-mock-client.client-id=sgw_user
# Client ID registered on your Authorization Server for this app
spring.security.oauth2.client.registration.so-mock-client.client-secret=1h5yVwe0fWmzJNMCmfnMhvPs7MBccZ8FyqPjiEFW8bhB2KJ3adMVf7mB8PASnIya
# Client Secret registered on your Authorization Server for this app
spring.security.oauth2.client.registration.so-mock-client.authorization-grant-type=client_credentials
# This is the grant type for service-to-service
spring.security.oauth2.client.registration.so-mock-client.scope=openid,profile
# Scopes your client needs to request from the AS to access the downstream API

# OAuth2 Provider Configuration
# Define the Authorization Server details
# The base URL of your Authorization Server
spring.security.oauth2.client.provider.zitadel-server.issuer-uri=http://localhost:8080
# Alternatively, you can explicitly define endpoints if issuer-uri discovery fails or is not supported
# spring.security.oauth2.client.provider.zitadel-server.authorization-uri=http://localhost:8080/oauth2/authorize
# spring.security.oauth2.client.provider.zitadel-server.token-uri=http://localhost:8080/oauth2/token
# spring.security.oauth2.client.provider.zitadel-server.jwk-set-uri=http://localhost:8080/oauth2/jwks